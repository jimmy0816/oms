generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  name            String
  role            String         @default("USER")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  password        String
  comments        Comment[]
  notifications   Notification[]
  reportsAssigned Report[]       @relation("AssignedReports")
  reportsCreated  Report[]       @relation("CreatedReports")
  ticketsAssigned Ticket[]       @relation("AssignedTickets")
  ticketsCreated  Ticket[]       @relation("CreatedTickets")
  ticketReviews   TicketReview[]
  userRoles       UserRole[]
  AuditLogs       AuditLog[]
  Attachment      Attachment[]
  activityLogs    ActivityLog[]
  savedViews      SavedView[]
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Polymorphic relation
  relatedId   String?
  relatedType String? // e.g., "TICKET", "REPORT", "COMMENT"

  @@index([userId])
  @@index([relatedId, relatedType])
}

model Ticket {
  id            String         @id @default(uuid())
  title         String
  description   String
  status        String         @default("PENDING")
  priority      String         @default("MEDIUM")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     String
  assigneeId    String?
  roleId        String?
  comments      Comment[]
  assignee      User?          @relation("AssignedTickets", fields: [assigneeId], references: [id])
  creator       User           @relation("CreatedTickets", fields: [creatorId], references: [id])
  role          Role?          @relation("RoleTickets", fields: [roleId], references: [id])
  reports       ReportTicket[]
  ticketReviews TicketReview[] // Relation to TicketReview
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Polymorphic relation
  parentId   String?
  parentType String? // e.g., "TICKET", "REPORT"
  Ticket     Ticket? @relation(fields: [ticketId], references: [id])
  ticketId   String?
  Report     Report? @relation(fields: [reportId], references: [id])
  reportId   String?

  @@index([userId])
  @@index([parentId, parentType])
}

model Report {
  id           String         @id @default(uuid())
  title        String
  description  String
  locationId   String?
  status       String         @default("UNCONFIRMED")
  priority     String         @default("MEDIUM")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  creatorId    String
  assigneeId   String?
  contactPhone String?
  contactEmail String?
  comments     Comment[]
  assignee     User?          @relation("AssignedReports", fields: [assigneeId], references: [id])
  creator      User           @relation("CreatedReports", fields: [creatorId], references: [id])
  tickets      ReportTicket[]

  // New category field
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  // Relation to Location model
  location Location? @relation(fields: [locationId], references: [id])

  @@index([categoryId])
  @@index([locationId])
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userRoles       UserRole[]
  rolePermissions RolePermission[]
  tickets         Ticket[]         @relation("RoleTickets")
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model AuditLog {
  id         String   @id @default(uuid())
  actorId    String? // 可選
  actor      User?    @relation(fields: [actorId], references: [id]) // 關聯也必須可選
  action     String
  targetId   String
  targetType String
  details    Json?
  createdAt  DateTime @default(now())
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime   @default(now())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Attachment {
  id          String   @id @default(uuid())
  filename    String
  url         String
  fileType    String // 例如 "image/jpeg", "application/pdf"
  fileSize    Int // 檔案大小，單位為位元組
  createdAt   DateTime @default(now())
  createdById String? // 上傳者的 ID
  createdBy   User?    @relation(fields: [createdById], references: [id])
  // 多型關聯欄位
  parentId    String // 關聯的工單或通報的 ID
  parentType  String // 關聯的實體類型 (例如 "TICKET", "REPORT")

  @@index([parentId, parentType]) // 為了查詢效率，建立複合索引
}

model ReportTicket {
  reportId   String
  ticketId   String
  assignedAt DateTime @default(now())
  report     Report   @relation(fields: [reportId], references: [id])
  ticket     Ticket   @relation(fields: [ticketId], references: [id])

  @@id([reportId, ticketId])
}

model ActivityLog {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  parentId   String
  parentType String

  @@index([parentId, parentType])
}

// New Category model for hierarchical categories
model Category {
  id       String     @id @default(uuid())
  name     String
  level    Int // 1, 2, 3... indicates the hierarchy level
  parentId String? // Self-referencing: ID of the parent category
  parent   Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children Category[] @relation("SubCategories")

  // Reports associated with this category (only for level 3 categories)
  reports Report[]

  @@unique([name, parentId]) // Ensures uniqueness of category names within the same level
  @@index([parentId])
}

// New Location model
model Location {
  id         String   @id @default(uuid())
  externalId Int?     @unique // 新增：用於儲存來自外部系統的原始數字 ID
  name       String   @unique
  reports    Report[]
}

model TicketReview {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])

  @@index([ticketId])
  @@index([creatorId])
}

model SavedView {
  id        String        @id @default(cuid())
  name      String
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  filters   Json
  viewType  SavedViewType @default(REPORT)
  isDefault Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([userId, name, viewType])
}

enum SavedViewType {
  REPORT
  TICKET
}
