generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  name            String
  role            String         @default("USER")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  password        String
  comments        Comment[]
  notifications   Notification[]
  reportsAssigned Report[]       @relation("AssignedReports")
  reportsCreated  Report[]       @relation("CreatedReports")
  ticketsAssigned Ticket[]       @relation("AssignedTickets")
  ticketsCreated  Ticket[]       @relation("CreatedTickets")
  userRoles       UserRole[]
}

model Notification {
  id              String   @id @default(uuid())
  title           String
  message         String
  isRead          Boolean  @default(false)
  createdAt       DateTime @default(now())
  userId          String
  relatedTicketId String?
  relatedReportId String?
  relatedReport   Report?  @relation(fields: [relatedReportId], references: [id])
  relatedTicket   Ticket?  @relation(fields: [relatedTicketId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Ticket {
  id            String         @id @default(uuid())
  title         String
  description   String
  status        String         @default("OPEN")
  priority      String         @default("MEDIUM")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     String
  assigneeId    String?
  comments      Comment[]
  notifications Notification[]
  assignee      User?          @relation("AssignedTickets", fields: [assigneeId], references: [id])
  creator       User           @relation("CreatedTickets", fields: [creatorId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticketId  String?
  userId    String
  reportId  String?
  report    Report?  @relation(fields: [reportId], references: [id])
  ticket    Ticket?  @relation(fields: [ticketId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Report {
  id            String         @id @default(uuid())
  title         String
  description   String
  location      String?
  status        String         @default("PENDING")
  priority      String         @default("MEDIUM")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creatorId     String
  assigneeId    String?
  images        String[]
  category      String?
  contactPhone  String?
  contactEmail  String?
  comments      Comment[]
  notifications Notification[]
  assignee      User?          @relation("AssignedReports", fields: [assigneeId], references: [id])
  creator       User           @relation("CreatedReports", fields: [creatorId], references: [id])
}

model Role {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}
